// Code generated by protoc-gen-burito. DO NOT EDIT.

package in

import (
	context "context"
	_ "embed"

	go_grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpc "google.golang.org/grpc"
)

//go:embed aboba.swagger.json
var Swagger []byte

type InServiceWrapper struct {
	InServiceServer
	interceptor grpc.UnaryServerInterceptor
}

func NewInServiceWrapper(
	srv InServiceServer,
	mws ...grpc.UnaryServerInterceptor,
) *InServiceWrapper {
	return &InServiceWrapper{
		InServiceServer: srv,
		interceptor:     go_grpc_middleware.ChainUnaryServer(mws...),
	}
}

func (w *InServiceWrapper) Name() string {
	return "aboba"
}

func (w *InServiceWrapper) Swagger() []byte {
	return Swagger
}

func (w *InServiceWrapper) RegisterGRPC(s *grpc.Server) {
	RegisterInServiceServer(s, w)
}

func (w *InServiceWrapper) RegisterGateway(
	ctx context.Context,
	mux *runtime.ServeMux,
) error {
	return RegisterInServiceHandlerServer(ctx, mux, w)
}

// middleware wrapper

func (w *InServiceWrapper) Get(ctx context.Context, in *GetRequest) (*GetResponse, error) {
	if w.interceptor == nil {
		return w.InServiceServer.Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     w,
		FullMethod: "/in.InService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return w.InServiceServer.Get(ctx, req.(*GetRequest))
	}
	resp, err := w.interceptor(ctx, in, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}
	return resp.(*GetResponse), err
}
